diff --git a/.github/workflows/wheels.yml b/.github/workflows/wheels.yml
new file mode 100644
index 0000000..4198c57
--- /dev/null
+++ b/.github/workflows/wheels.yml
@@ -0,0 +1,69 @@
+name: Build all
+
+on: [push, pull_request]
+
+jobs:
+  build_wheels:
+    name: Build wheels on ${{ matrix.os }}
+    runs-on: ${{ matrix.os }}
+    strategy:
+      fail-fast: false
+      matrix:
+        include:
+          - os: ubuntu-20.04
+            name: manylinux2014
+            cibw:
+              arch: x86_64
+              build: "cp36* cp37* cp38* cp39*"
+              manylinux_image: manylinux2014
+          - os: macos-10.15
+            name: mac
+            cibw:
+              build: "cp36* cp37* cp38*"
+          - os: macos-10.15
+            name: mac-arm
+            cibw:
+              arch: universal2
+              build: "cp39*"
+          - os: windows-2019
+            name: win_amd64
+            architecture: x64
+            cibw:
+              build: "cp*win_amd64"
+
+    env:
+      CIBW_BUILD: "${{ matrix.cibw.build || '*' }}"
+      CIBW_MANYLINUX_X86_64_IMAGE: "${{ matrix.cibw.manylinux_image }}"
+      CIBW_ARCHS_LINUX: "${{ matrix.cibw.arch || 'auto' }}"
+      CIBW_ARCHS_MACOS: "${{ matrix.cibw.arch || 'auto' }}"
+      CIBW_BEFORE_ALL_LINUX: ""
+      CIBW_BEFORE_BUILD_MACOS: brew install libomp
+      CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
+      CIBW_BEFORE_TEST_MACOS: "mv {package}/qsimcirq /tmp"
+      CIBW_TEST_COMMAND_MACOS: "pip freeze && pip -V && python -V && which python && which pip && pytest {package}/qsimcirq_tests/qsimcirq_test.py && mv /tmp/qsimcirq {package}"
+    steps:
+      - uses: actions/checkout@v2
+
+      # Used to host cibuildwheel
+      - uses: actions/setup-python@v2
+
+      - name: Install cibuildwheel and twine
+        run: python -m pip install cibuildwheel==1.11.0 twine virtualenv
+
+      - name: Run C++ tests
+        run: bash build_tools/github/test_libs.sh
+
+      - name: Build wheels
+        run: python -m cibuildwheel --output-dir wheelhouse
+
+      - uses: actions/upload-artifact@v2
+        with:
+          path: ./wheelhouse/*.whl
+
+      - name: Upload wheel binary to PyPI
+        env:
+          TWINE_USERNAME: ${{ secrets.PYPI_USER }}
+          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
+          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
+        run: |
+          twine upload --skip-existing ./wheelhouse/*.whl
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5f76d3d..fedef28 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,7 +1,16 @@
 cmake_minimum_required(VERSION 3.11)
 project(qsim)
 
-set(CMAKE_CXX_FLAGS "-O3 -march=native -fopenmp")
+set(CMAKE_CXX_STANDARD 11)
+
+if(NOT (MSVC OR MSYS OR MINGW))
+    set(CMAKE_CXX_FLAGS "-O3 -march=native -fopenmp")
+endif()
+
+if(APPLE)
+    include_directories("/usr/local/include" "/usr/local/opt/llvm/include")
+    link_directories("/usr/local/lib" "/usr/local/opt/llvm/lib")
+endif()
 
 include(FetchContent)
 
diff --git a/build_tools/github/test_libs.sh b/build_tools/github/test_libs.sh
new file mode 100644
index 0000000..06465e3
--- /dev/null
+++ b/build_tools/github/test_libs.sh
@@ -0,0 +1,43 @@
+#!/bin/bash
+set -e  # fail and exit on any command erroring
+set -x  # print evaluated commands
+
+## Install the given bazel version on macos
+function update_bazel_macos {
+  BAZEL_VERSION=$1
+  curl -L https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-darwin-x86_64.sh -O
+  ls
+  chmod +x bazel-*.sh
+  ./bazel-${BAZEL_VERSION}-installer-darwin-x86_64.sh --user
+  rm -f ./bazel-${BAZEL_VERSION}-installer-darwin-x86_64.sh
+  # Add new bazel installation to path
+  PATH="/Users/kbuilder/bin:$PATH"
+}
+
+# Install bazel
+#update_bazel_macos ${BAZEL_VERSION:-0.26.0}
+which bazel
+bazel version
+
+#cd ${KOKORO_ARTIFACTS_DIR}/github/qsim
+
+# Create virtual env
+#python3 -m virtualenv env
+#source env/bin/activate
+
+# Attempt to build all components in SSE and basic mode.
+# The Kokoro MacOS VMs are not configured for AVX2 or OpenMP, so these modes
+# are excluded from the build and test process.
+bazel build --config=sse apps:all
+bazel build apps:all
+
+# Run all basic tests.
+set +e  # Ignore errors until artifacts are collected.
+EXIT_CODE=0
+for TARGET in bitstring_test circuit_qsim_parser_test fuser_basic_test \
+              gates_qsim_test hybrid_test matrix_test run_qsim_test \
+              run_qsimh_test simulator_basic_test statespace_basic_test; do \
+  if ! bazel test --test_output=errors tests:${TARGET}; then
+    EXIT_CODE=1
+  fi
+done
\ No newline at end of file
diff --git a/qsimcirq_tests/qsimcirq_test.py b/qsimcirq_tests/qsimcirq_test.py
index 7766f01..71dbb1a 100644
--- a/qsimcirq_tests/qsimcirq_test.py
+++ b/qsimcirq_tests/qsimcirq_test.py
@@ -11,6 +11,7 @@
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
+print(help('modules'))
 
 import numpy as np
 import sympy
@@ -761,7 +762,7 @@ class NoiseStep(cirq.Gate):
         return self._matrix
 
     def __str__(self):
-        return f"NoiseStep({self._matrix})"
+        return "NoiseChannel(%s)" % self._matrix
 
     def __repr__(self):
         return str(self)
@@ -867,7 +868,7 @@ class NoiseChannel(cirq.Gate):
         return [m for _, m in self._prob_op_pairs]
 
     def __str__(self):
-        return f"NoiseChannel({self._ops})"
+        return "NoiseChannel(%s)" % self._ops
 
     def __repr__(self):
         return str(self)
diff --git a/requirements.txt b/requirements.txt
index 8ec15ea..150472d 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -7,7 +7,6 @@ absl-py
 
 # Build and test requirements
 
-black==20.8b1
-flynt~=0.60
+sympy
 pybind11
 pytest
diff --git a/setup.py b/setup.py
index 8db92e0..2146faf 100644
--- a/setup.py
+++ b/setup.py
@@ -56,6 +56,12 @@ class CMakeBuild(build_ext):
             cmake_args += ["-DCMAKE_BUILD_TYPE=" + cfg]
             build_args += ["--", "-j2"]
 
+        if platform.system() == "Darwin":
+            cmake_args += [
+                '-DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang',
+                '-DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++',
+            ]
+
         env = os.environ.copy()
         env["CXXFLAGS"] = '{} -DVERSION_INFO=\\"{}\\"'.format(
             env.get("CXXFLAGS", ""), self.distribution.get_version()
